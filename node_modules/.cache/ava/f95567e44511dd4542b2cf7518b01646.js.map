{"version":3,"sources":["utils-test.js"],"names":["test","require","utils","t","tags","extractTags","deepEqual","password","encrypted","result","encrypt","is"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,cAAR,CAAd;;AAEAD,KAAK,8BAAL,EAAqCG,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACxC,MAAIC,OAAOF,MAAMG,WAAN,CAAkB,2DAAlB,CAAX;;AAEAF,IAAEG,SAAF,uBAAYF,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkB,CAChB,SADgB,EAEhB,SAFgB,EAGhB,QAHgB,EAIhB,KAJgB,EAKhB,KALgB,EAMhB,KANgB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASAA,SAAOF,MAAMG,WAAN,CAAkB,wBAAlB,CAAP;AACAF,IAAEG,SAAF,yBAAYF,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkB,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEAA,SAAOF,MAAMG,WAAN,EAAP;AACAF,IAAEG,SAAF,yBAAYF,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkB,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEAA,SAAOF,MAAMG,WAAN,CAAkB,IAAlB,CAAP;AACAF,IAAEG,SAAF,yBAAYF,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkB,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CApBD;;AAsBAJ,KAAK,kBAAL,EAAyBG,KAAK;AAAA;AAAA;;AAC5B,MAAII,WAAW,QAAf;AACA,MAAIC,YAAY,kEAAhB;;AAEA,MAAIC,SAASP,MAAMQ,OAAN,CAAcH,QAAd,CAAb;;AAEAJ,IAAEQ,EAAF,yBAAKF,MAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAaD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAPD;;AASA","file":"utils-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst utils = require('../lib/utils')\n\ntest('extracting hashtag from text', t => {\n  let tags = utils.extractTags('a #picture with tags #AwEsOme #Platzi #AVA and #100 ##yes')\n\n  t.deepEqual(tags, [\n    'picture',\n    'awesome',\n    'platzi',\n    'ava',\n    '100',\n    'yes'\n  ])\n\n  tags = utils.extractTags('a picture with no tags')\n  t.deepEqual(tags, [])\n\n  tags = utils.extractTags()\n  t.deepEqual(tags, [])\n\n  tags = utils.extractTags(null)\n  t.deepEqual(tags, [])\n})\n\ntest('encrypt password', t => {\n  let password = 'foo123'\n  let encrypted = '02b353bf5358995bc7d193ed1ce9c2eaec2b694b21d2f96232c9d6a0832121d1'\n\n  let result = utils.encrypt(password)\n\n  t.is(result, encrypted)\n})\n\n/*\n  --> crypto = require('crypto')\n  --> shasum = crypto.createHash('sha256')\n  --> shasum.update('_variable')\n  --> shasum.digest('hex')\n*/\n"]}